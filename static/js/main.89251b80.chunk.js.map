{"version":3,"sources":["component/weatherapp.jsx","component/form.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","style","color","city","weatherIcon","temp_celcius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplet","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celcius","calCelcius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Clear","Clouds","icons","rangeID","this","Atmosphere","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.89251b80.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather=(props)=>{\r\nreturn (\r\n    <div className=\"conatiner\">\r\n        <div className=\"cards pt-5\" style={{color:'white'}} >\r\n            <h1>{props.city}</h1>\r\n            <h5 className=\"py-4\"> <i className={`wi ${props.weatherIcon} display-1`}/> </h5>\r\n            {props.temp_celcius? (<h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>):null}\r\n            {minmaxTemp(props.temp_min,props.temp_max)}\r\n            <h3 className=\"py-2\">{props.description} </h3>\r\n        </div>\r\n    </div>\r\n);\r\n};\r\n\r\nfunction minmaxTemp(min,max){\r\n       if(min&&max){\r\n           return(\r\n            <h3>\r\n                 <span className=\"px-4\">{min}&deg;</span>\r\n                 <span className=\"px-4\">{max}&deg;</span>\r\n              </h3>\r\n    );\r\n}\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form=props=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n           <form onSubmit={props.loadweather}>\r\n           <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplet=\"off\" placeholder=\"City\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input type=\"text\" className=\"form-control\" name=\"country\" autoComplet=\"off\" placeholder=\"Country\" />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n           </form>\r\n        </div>\r\n    )\r\n}\r\nfunction error(){\r\n    return(\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">Please enter city and country</div>)\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Weather from './component/weatherapp';\nimport Form from './component/form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nimport './App.css';\n\n\nconst API_key=\"5b050a079847dc70cb6ebad5d59df1d2\";\n\nclass App extends React.Component{\nconstructor(){\n  super();\n  this.state={\n    city: undefined,\n    country: undefined,\n    icon:undefined,\n    celcius:undefined,\n    temp_min:undefined,\n    temp_max:undefined,\n    description:\"\",\n    error:false\n  };\n\n\n  this.weatherIcon={\n    Thunderstorm:\"wi-thunderstorm\",\n    Drizzle:\"wi-drizzle\",\n    Rain:\"wi-rain\",\n    Snow:\"wi-snow\",\n    Clear:\"wi-day-sunny\",\n    Clouds:\"wi-day-fog\"\n  };\n}\n\nget_WeatherIcon(icons,rangeID){\nswitch (true){\n  case rangeID>=200&&rangeID<=232:\n  this.setState({icon:this.weatherIcon.Thunderstorm});\n\n  break;\n  case rangeID>=300&&rangeID<=321:\n  this.setState({icon:this.weatherIcon.Drizzle});\n  break;\n  case rangeID>=500&&rangeID<=531:\n  this.setState({icon:this.weatherIcon.Rain});\n  break;\n  case rangeID>=600&&rangeID<=622:\n  this.setState({icon:this.weatherIcon.Snow});\n  break;\n  case rangeID>=701&&rangeID<=781:\n  this.setState({icon:this.weatherIcon.Atmosphere});\n  break;\n  case rangeID>=801&&rangeID<=804:\n  this.setState({icon:this.weatherIcon.Clouds});\n  break;\n  default:\n  this.setState({icon:this.weatherIcon.Clouds});\n}\n}\n\n\ncalCelcius(temp){\n  let cell=Math.floor(temp-273.15);\n  return cell;\n}\ngetWeather=async(e)=>{\n  e.preventDefault();\n  const city=e.target.elements.city.value;\n  const country=e.target.elements.country.value;\n  if(city&&country){\n    const api_call= await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n    );\n  \n    const response= await api_call.json();\n    console.log(response);\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      celcius:this.calCelcius(response.main.temp),\n      temp_min:this.calCelcius(response.main.temp_min),\n      temp_max:this.calCelcius(response.main.temp_max),\n      description:response.weather[0].description\n    });\n  \n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }\n  else{\n    this.setState({error:true});\n  }\n};\n\n\n   render(){\n     return(\n      <div className=\"App\">\n      <Form loadweather={this.getWeather}error={this.state.error}/>\n\n        <Weather \n        city={this.state.city} \n        country={this.state.country}\n        temp_celcius={this.state.celcius}\n        temp_min={this.state.temp_min}\n        temp_max={this.state.temp_max}\n        description={this.state.description}\n        weatherIcon={this.state.icon}/>\n      </div>\n    );\n   }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}